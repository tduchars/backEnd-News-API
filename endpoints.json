"{\"description\":{\"TOPICS\":\"GET / - Returns all topics in an object with the key topics.}\",{\"USERS\":\"GET / - Gets all users and returns them on an object with the key users.\n GET /:username - Gets a user object by their username. Destructured out of an array and in an object on the key user.}\",{\"ARTICLES\":\"GET / - Displays an array of all current articles and their information, this can then be sorted by any given valid property as well as ordered in ascending or descending order. Defaults to sorting by timestamp and order defaults to descending. So default order is in descending order of time.\nThese results can also be filtered by any combination of author and/or topic.\n GET /:article_id - Displays information from a particular article, such as it's title, votes, author, comment count, etc and desctructures the return out of an array and is in an object on the key article.\n PATCH /:article_id - Updates the given articles vote count (positive or negative) and returns the whole updated object on the key article. To increment the vote you would pass a patch body object as follows - inc_votes: 1 - \n POST /:article_id/comments - Allows a user to post a new comment to a particular article (requiring a comment body and a valid username). Returns the object on the key comment.\n GET /:article_id/comments - Displays all available comments for a particular article and their corresponding information. Returns empty array if article exists but has no comments and throws 404 if article does not exist. Returns object on the key comments. Allows a sort_by query and order query both which default to created_at timestamp and descending.}\",{\"COMMENTS\":\"PATCH: /:comment_id - Allows the updating of a comments vote by either positive or negative integer.}\n {DELETE: /:comment_id - Allows for a particular comment to be deleted. This returns no data just a status of 204.}\"}}"
